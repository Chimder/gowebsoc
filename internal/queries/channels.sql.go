// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: channels.sql

package queries

import (
	"context"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (name, created_at, updated_at)
VALUES ($1, NOW(), NOW())
RETURNING (id, name, created_at, updated_at)
`

func (q *Queries) CreateChannel(ctx context.Context, name string) (interface{}, error) {
	row := q.db.QueryRow(ctx, createChannel, name)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getChannel = `-- name: GetChannel :one
SELECT id, created_at, updated_at, name FROM channels WHERE id = $1
`

func (q *Queries) GetChannel(ctx context.Context, id int32) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannel, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, created_at, updated_at, name FROM channels
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
