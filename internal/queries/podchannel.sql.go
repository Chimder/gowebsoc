// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: podchannel.sql

package queries

import (
	"context"
)

const createPodChannel = `-- name: CreatePodChannel :one
INSERT INTO podchannels (name, types, channel_id, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING (id, name, created_at, updated_at)
`

type CreatePodChannelParams struct {
	Name      string `db:"name" json:"name"`
	Types     string `db:"types" json:"types"`
	ChannelID int32  `db:"channel_id" json:"channel_id"`
}

func (q *Queries) CreatePodChannel(ctx context.Context, arg CreatePodChannelParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, createPodChannel, arg.Name, arg.Types, arg.ChannelID)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getPodchannels = `-- name: GetPodchannels :many
SELECT id, created_at, updated_at, name, types, channel_id FROM podchannels WHERE channel_id = $1
`

func (q *Queries) GetPodchannels(ctx context.Context, channelID int32) ([]Podchannel, error) {
	rows, err := q.db.Query(ctx, getPodchannels, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Podchannel
	for rows.Next() {
		var i Podchannel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Types,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
