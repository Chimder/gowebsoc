// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channels (name, created_at, updated_at) VALUES ($1, NOW(), NOW())
RETURNING id, name, created_at, updated_at
`

type CreateChannelRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateChannel(ctx context.Context, name string) (CreateChannelRow, error) {
	row := q.db.QueryRow(ctx, createChannel, name)
	var i CreateChannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPodchannel = `-- name: CreatePodchannel :one
INSERT INTO podchannels (name, type, channel_id, created_at, updated_at) VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, name, type, created_at, updated_at, channel_id
`

type CreatePodchannelParams struct {
	Name      string
	Type      string
	ChannelID int32
}

type CreatePodchannelRow struct {
	ID        int32
	Name      string
	Type      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	ChannelID int32
}

func (q *Queries) CreatePodchannel(ctx context.Context, arg CreatePodchannelParams) (CreatePodchannelRow, error) {
	row := q.db.QueryRow(ctx, createPodchannel, arg.Name, arg.Type, arg.ChannelID)
	var i CreatePodchannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
	)
	return i, err
}

const getChannel = `-- name: GetChannel :one
SELECT id, name, created_at, updated_at FROM channels WHERE id = $1
`

type GetChannelRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetChannel(ctx context.Context, id int32) (GetChannelRow, error) {
	row := q.db.QueryRow(ctx, getChannel, id)
	var i GetChannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPodchannels = `-- name: GetPodchannels :many
SELECT id, name, type, created_at, updated_at, channel_id FROM podchannels WHERE channel_id = $1
`

type GetPodchannelsRow struct {
	ID        int32
	Name      string
	Type      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	ChannelID int32
}

func (q *Queries) GetPodchannels(ctx context.Context, channelID int32) ([]GetPodchannelsRow, error) {
	rows, err := q.db.Query(ctx, getPodchannels, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPodchannelsRow
	for rows.Next() {
		var i GetPodchannelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
