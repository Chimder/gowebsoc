package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Podchannel represents a row from 'public.podchannels'.
type Podchannel struct {
	ID        int       `json:"id" db:"id"`                 // id
	CreatedAt time.Time `json:"created_at" db:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at" db:"updated_at"` // updated_at
	ChannelID int       `json:"channel_id" db:"channel_id"` // channel_id
	Name      string    `json:"name" db:"name"`             // name
	Types     string    `json:"types" db:"types"`           // types
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Podchannel] exists in the database.
func (p *Podchannel) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Podchannel] has been marked for deletion
// from the database.
func (p *Podchannel) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Podchannel] to the database.
func (p *Podchannel) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.podchannels (` +
		`created_at, updated_at, channel_id, name, types` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types)
	if err := db.QueryRowContext(ctx, sqlstr, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Podchannel] in the database.
func (p *Podchannel) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.podchannels SET ` +
		`created_at = $1, updated_at = $2, channel_id = $3, name = $4, types = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Podchannel] to the database.
func (p *Podchannel) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Podchannel].
func (p *Podchannel) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.podchannels (` +
		`id, created_at, updated_at, channel_id, name, types` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at, channel_id = EXCLUDED.channel_id, name = EXCLUDED.name, types = EXCLUDED.types `
	// run
	logf(sqlstr, p.ID, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.CreatedAt, p.UpdatedAt, p.ChannelID, p.Name, p.Types); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Podchannel] from the database.
func (p *Podchannel) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.podchannels ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PodchannelByID retrieves a row from 'public.podchannels' as a [Podchannel].
//
// Generated from index 'podchannels_pkey'.
func PodchannelByID(ctx context.Context, db DB, id int) (*Podchannel, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, created_at, updated_at, channel_id, name, types ` +
		`FROM public.podchannels ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Podchannel{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.CreatedAt, &p.UpdatedAt, &p.ChannelID, &p.Name, &p.Types); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Channel returns the Channel associated with the [Podchannel]'s (ChannelID).
//
// Generated from foreign key 'podchannels_channel_id_fkey'.
func (p *Podchannel) Channel(ctx context.Context, db DB) (*Channel, error) {
	return ChannelByID(ctx, db, p.ChannelID)
}
